/*
 * Copyright 2017 Square Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";

package squareup.catalog.resources;

option java_package = "com.squareup.catalog.resources";
option java_multiple_files = true;

import "money.proto";

message CatalogModifierOverride {
    // @desc The Modifier whose default behavior is being overridden.
    optional string modifier_id = 1;

    // @desc If true, this modifier should be selected by default for this Item.
    optional bool on_by_default = 2;
}

// @desc Controls the properties of a [CatalogModifierList](#type-catalogmodifierlist) as it applies to this Item.
message CatalogItemModifierListInfo {
    // @desc The [CatalogModifierList](#type-catalogmodifierlist) controlled by this CatalogItemModifierListInfo.
    optional string modifier_list_id = 1;

    // @desc A set of [CatalogModifierOverride](#type-catalogmodifieroverride) objects that override whether a given modifier is enabled by default.
    repeated CatalogModifierOverride modifier_overrides = 3;

    // @desc If >= 0, the smallest number of modifiers that must be selected from this [CatalogModifierList](#type-catalogmodifierlist).
    optional int32 min_selected_modifiers = 4 [default = -1];

    // @desc If >= 0, the largest number of modifiers that can be selected from this [CatalogModifierList](#type-catalogmodifierlist).
    optional int32 max_selected_modifiers = 5 [default = -1];

    optional bool enabled = 6 [default = true];
}

// @desc The type of a [CatalogItem](#type-catalogitem).
enum CatalogItemProductType {
    // @desc An ordinary Item.
    REGULAR = 0;
    // @desc A Square gift card.
    GIFT_CARD = 1;
    // @desc A service that can be booked using the Square Appointments app.
    APPOINTMENTS_SERVICE = 2;
    // @desc An Item associated with the Retail vertical.
    RETAIL_ITEM = 3;
    // @desc An Item associated with the Restaurants vertical.
    RESTAURANT_ITEM = 4;
}

// @desc An Item (i.e., product family) in the Catalog object model.
message CatalogItem {
    // @desc The item's name.
    optional string name = 1;

    // @desc The item's description.
    optional string description = 2;

    // @desc The text of the item's display label in Square Register. Only up to the first five characters of the string are used.
    optional string abbreviation = 3;

    // @desc The color of the item's display label in Square Register.
    optional string label_color = 4;

    // @desc If `true`, the item can be added to shipping orders from the merchant's online store.
    optional bool available_online = 7;

    // @desc If `true`, the item can be added to pickup orders from the merchant's online store.
    optional bool available_for_pickup = 8;

    // @desc If `true`, the item can be added to electronically fulfilled orders from the merchant's online store.
    optional bool available_electronically = 9; // not in v1

    // @desc The ID of the item's category, if any.
    optional string category_id = 10;

    /*--
      @desc A set of ids indicating the [CatalogTax](#type-catalogtax)es that are enabled for this item. When updating
      an item, any taxes listed here will be added to the item. To delete a tax from an item, use `UpdateItemTaxes`.
    --*/
    repeated string tax_ids = 13;

    /*--
      @desc A set of [CatalogItemModifierListInfo](#type-catalogitemmodifierlistinfo) objects representing the modifier lists that apply to
      this item, along with the overrides and min and max limits that are specific to this Item.
    --*/
    repeated CatalogItemModifierListInfo modifier_list_info = 14;

    // @desc The URL of an image representing this Item.
    optional string image_url = 15;

    // @desc A list of [CatalogObject](#type-catalogobject)s containing the [CatalogItemVariation](#type-catalogitemvariation)s for this Item.
    repeated CatalogObject variations = 16;

    /*--
      @desc The product type of the Item. May not be changed once an Item has been created. Only Items of product type
      `REGULAR` may be created by this API; Items with other product types are read-only. See
      [CatalogItemProductType](#type-catalogitemproducttype) for all possible values.
    --*/
    optional CatalogItemProductType product_type = 17 [default = REGULAR];

    /*--
      @desc If `false`, Square Register will present the Item's details screen immediately, allowing the
      merchant to choose Modifiers before adding the Item to the cart.  This is the default behavior.

      If `true`, Square Register will immediately add the Item to the cart with the pre-selected
      Modifiers, and merchants can edit modifiers by drilling down onto the Item's details.

      Third-party clients are encouraged to implement similar behaviors.
    --*/
    optional bool skip_modifier_screen = 18;
}

// @desc Indicates whether Square should alert the merchant when the inventory quantity of a [CatalogItemVariation](#type-catalogitemvariation) is low.
enum InventoryAlertType {
    // @desc The variation does not display an alert.
    NONE = 1;

    // @desc The variation generates an alert when its quantity is low.
    LOW_QUANTITY = 2;
}

// @desc Indicates whether the price of a [CatalogItemVariation](#type-catalogitemvariation) should be entered manually at the time of sale.
enum CatalogPricingType {
    // @desc The [CatalogItemVariation](#type-catalogitemvariation)'s price is fixed.
    FIXED_PRICING = 0;

    // @desc The [CatalogItemVariation](#type-catalogitemvariation)'s price is entered at the time of sale.
    VARIABLE_PRICING = 1;
}

// @desc Price and inventory overrides for a [CatalogItemVariation](#type-catalogitemvariation) at a specific location.
message ItemVariationLocationOverrides {
    // @desc The ID of the location.
    optional string location_id = 1;

    // @desc The price of the [CatalogItemVariation](#type-catalogitemvariation) at the given location, or blank for variable pricing.
    optional common.Money price_money = 2;

    /*--
      @desc The pricing type (fixed or variable) for the [CatalogItemVariation](#type-catalogitemvariation) at the given location.
      See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
    --*/
    optional CatalogPricingType pricing_type = 3;

    // @desc If `true`, inventory tracking is active for the [CatalogItemVariation](#type-catalogitemvariation) at this location.
    optional bool track_inventory = 4;

    /*--
      @desc Indicates whether the [CatalogItemVariation](#type-catalogitemvariation) displays an alert when its inventory
      quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype)
      for all possible values.
    --*/
    optional InventoryAlertType inventory_alert_type = 5;

    /*--
      @desc If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
      is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.

      This value is always an integer.
    --*/
    optional int64 inventory_alert_threshold = 6;
}

// @desc An Item Variation (i.e., product) in the Catalog object model.
message CatalogItemVariation {
    // @desc The id of the item associated with this variation.
    optional string item_id = 1;

    // @desc The item variation's name.
    optional string name = 2;

    // @desc The item variation's SKU, if any.
    optional string sku = 3;

    // @desc The item variation's UPC, if any.
    optional string upc = 13;

    // @desc Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
    optional CatalogPricingType pricing_type = 5;

    // @desc The item variation's price, if any.
    optional common.Money price_money = 6;

    // @desc Per-location price and inventory overrides.
    repeated ItemVariationLocationOverrides location_overrides = 12;

    // @desc If `true`, inventory tracking is active for the variation.
    optional bool track_inventory = 7;

    /*--
      @desc Indicates whether the item variation displays an alert when its inventory quantity is less than or equal
      to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.
    --*/
    optional InventoryAlertType inventory_alert_type = 8;

    /*--
      @desc If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
      is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.

      This value is always an integer.
    --*/
    optional int64 inventory_alert_threshold = 9;

    /*--
      @desc If the Item that owns this Item Variation is of type `APPOINTMENTS_SERVICE`, then this is the duration of
      the service in milliseconds. For example, a 30 minute appointment would have the value `1800000`, which is equal
      to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
    --*/
    optional int64 service_duration = 14;
}

// @desc An Category to which an Item belongs in the Catalog object model.
message CatalogCategory {
    // @desc The category's name.
    optional string name = 1;
}

// Tax specific Items V1 calculation phases. The tag numbers MUST match the ones
// defined in squareup/items/items.proto for Items V1.

// @desc When to calculated the taxes to a due on cart.
enum TaxCalculationPhase {
    // @desc The fee is calculated based on the payment's subtotal.
    TAX_SUBTOTAL_PHASE = 2;

    // @desc The fee is calculated based on the payment's total.
    TAX_TOTAL_PHASE = 3;
}

// @desc Whether to the tax amount should be additional to or included in to the item price.
enum TaxInclusionType {
    /*--
      @desc The tax is an additive tax. The tax amount is added on top of the
      [CatalogItemVariation](#type-catalogitemvariation) price. For example, a $1.00 item with a 10% additive
      tax would have a total cost to the buyer of $1.10.
    --*/
    ADDITIVE = 0;

    /*--
      @desc The tax is an inclusive tax. The tax amount is included in the
      [CatalogItemVariation](#type-catalogitemvariation) price. For example, a $1.00 item with a 10% inclusive
      tax would have a total cost to the buyer of $1.00, with $0.91 (91 cents) of that total being the cost of the item
      and $0.09 (9 cents) being tax.
    --*/
    INCLUSIVE = 1;
}

// @desc A Tax in the Catalog object model.
message CatalogTax {
    // @desc The tax's name.
    optional string name = 1;

    // @desc Whether the tax is calculated based on a payment's subtotal or total. See [TaxCalculationPhase](#type-taxcalculationphase) for all possible values.
    optional TaxCalculationPhase calculation_phase = 2 [default = TAX_SUBTOTAL_PHASE];

    // @desc Whether the tax is `ADDITIVE` or `INCLUSIVE`. See [TaxInclusionType](#type-taxinclusiontype) for all possible values.
    optional TaxInclusionType inclusion_type = 3 [default = ADDITIVE];

    /*--
      @desc The percentage of the tax in decimal form, using a '.' as the decimal separator and without a '%' sign.
      A value of `7.5` corresponds to 7.5%.
    --*/
    optional string percentage = 5;

    // @desc If `true`, the fee applies to custom amounts entered into Square Register that are not associated with a particular item.
    optional bool applies_to_custom_amounts = 6 [default = true];

    // @desc If `true`, the tax will be shown as enabled in Square Register.
    optional bool enabled = 7 [default = true];
}

// @desc How to apply a [CatalogDiscount](#type-catalogdiscount) to a [CatalogItem](#type-catalogitem).
enum CatalogDiscountType {
    // @desc Apply the discount as a fixed percentage (e.g., 5%) off the Item price.
    FIXED_PERCENTAGE = 0;

    // @desc Apply the discount as a fixed amount (e.g., $1.00) off the Item price.
    FIXED_AMOUNT = 1;

    // @desc Apply the discount as a variable percentage off the Item price. The percentage will be specified at the time of sale.
    VARIABLE_PERCENTAGE = 2;

    // @desc Apply the discount as a variable amount off the Item price. The amount should be specified at the time of sale.
    VARIABLE_AMOUNT = 3;
}

// @desc A Discount in the Catalog object model.
message CatalogDiscount {
    // @desc The discount's name.
    optional string name = 1;

    /*--
      @desc Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale.
      See [CatalogDiscountType](#type-catalogdiscounttype) for all possible values.
    --*/
    optional CatalogDiscountType discount_type = 2 [default = FIXED_PERCENTAGE];

    /*--
      @desc The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal
      separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type`
      is `VARIABLE_PERCENTAGE`.

      Do not include this field for amount-based discounts.
    --*/
    optional string percentage = 3;

    /*--
      @desc The amount of the discount. Specify an amount of `0` if `discount_type` is `VARIABLE_AMOUNT`.

      Do not include this field for percentage-based discounts.
    --*/
    optional common.Money amount_money = 4;

    // @desc Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment.
    optional bool pin_required = 5 [default = false];

    // @desc The color of the discount's display label in Square Register.
    optional string label_color = 6;
}

// @desc A Modifier in the Catalog object model.
message CatalogModifier {
    // @desc The modifier option's name.
    optional string name = 1;

    // @desc The modifier's price.
    optional common.Money price_money = 2;
}

// @desc Indicates whether a Modifier List supports multiple selections.
enum CatalogModifierListSelectionType {
    // @desc Indicates that a Modifier List allows only a single modifier to be selected.
    SINGLE = 0;

    // @desc Indicates that a Modifier List allows multiple modifiers to be selected.
    MULTIPLE = 1;
}

/*--
  @desc A Modifier List in the Catalog object model. A modifier list contains [Modifier](#type-catalogmodifier)s
  that can be applied to a [CatalogItem](#type-catalogitem) at the time of sale.

  For example, a Modifer List "Condiments" that would apply to a "Hot Dog" [CatalogItem](#type-catalogitem) might
  contain Modifiers "Ketchup", "Mustard", and "Relish". The `selection_type` field specifies whether or not multiple
  selections from the Modifier List are allowed.
--*/
message CatalogModifierList {

    // @desc The modifier list's name.
    optional string name = 2;

    /*--
      @desc Indicates whether multiple options from the modifier list can be applied to a single item.
      See [CatalogModifierListSelectionType](#type-catalogmodifierlistselectiontype) for all possible values.
    --*/
    optional CatalogModifierListSelectionType selection_type = 4 [default = SINGLE];

    /*--
      @desc The options included in the modifier list. You must include at least one modifier.
      Each [CatalogObject](#type-catalogobject) must have type `MODIFIER` and contain
      [CatalogModifier](#type-catalogmodifier) data.
    --*/
    repeated CatalogObject modifiers = 5;
}

// @desc A Connect V1 items object id along with its associated location ID.
message CatalogV1Id {
    // @desc The ID for an object in Connect V1, if different from its Connect V2 id.
    optional string catalog_v1_id = 1;

    // @desc The ID of the location this Connect V1 id is associated with.
    optional string location_id = 2;
}

// Subset of Items V1 object types. The tag numbers match the ones defined for Items V3.

/*--
  @desc Possible kinds of [CatalogObject](#type-catalogobject)s returned from the Catalog, each
  contaning type-specific properties in the `*_data` field corresponding to the object type.
--*/
enum CatalogObjectType {
    /*--
      @desc An Item, corresponding to [CatalogItem](#type-catalogitem). The Item-specific data
      will be stored in the `item_data` field.
    --*/
    ITEM = 1;

    /*--
      @desc A Category, corresponding to [CatalogCategory](#type-catalogcategory). The Category-specific data
      will be stored in the `category_data` field.
    --*/
    CATEGORY = 4;

    /*--
      @desc An Item Variation, corresponding to [CatalogItemVariation](#type-catalogitemvariation). The
      Item Variation-specific data will be stored in the `item_variation_data` field.
    --*/
    ITEM_VARIATION = 5;

    /*--
      @desc A Tax, corresponding to [CatalogTax](#type-catalogtax). The Tax-specific data
      will be stored in the `tax_data` field.
    --*/
    TAX = 6;

    /*--
      @desc A Discount, corresponding to [CatalogDiscount](#type-catalogdiscount). The Discount-specific data
      will be stored in the `discount_data` field.
    --*/
    DISCOUNT = 8;

    /*--
      @desc A Modifier List, corresponding to [CatalogModifierList](#type-catalogmodifierlist). The Modifier List-specific data
      will be stored in the `modifier_list_data` field.
    --*/
    MODIFIER_LIST = 10;

    /*--
      @desc A Modifier, corresponding to [CatalogModifier](#type-catalogmodifier). The Modifier-specific data
      will be stored in the `modifier_data` field.
    --*/
    MODIFIER = 12;
}

// @desc The wrapper type for all objects in the Catalog object model.
message CatalogObject {
    /*--
      @desc Possible kinds of objects returned from the Catalog, each with corresponding expected
      properties as defined by each `*_data` property inside the returned outer
      [CatalogObjectType](#type-catalogobjecttype).

      See [CatalogObjectType](#type-catalogobjecttype) for all possible values.
    --*/
    optional CatalogObjectType type = 1;

    // @desc A unique Square-assigned identifier to reference this object in the catalog.
    optional string id = 2;

    /*--
      @desc Last modification [timestamp](#workingwithdates) in RFC 3339 format, e.g., 2016-08-15T23:59:33.123Z
      would indicate the UTC time August 15, 2016 at 23:59:33 and 123 milliseconds.
    --*/
    optional string updated_at = 3;

    /*--
      @desc The version of the object. When updating an object, the version supplied by the
      must match the version in the database, otherwise the write will be rejected as conflicting.
    --*/
    optional int64 version = 4;

    /*--
      @desc If `true`, the object has been deleted from the database. Must be `false` for new objects
      being inserted. When deleted, the `updated_at` field will equal the deletion time.
    --*/
    optional bool is_deleted = 5;

    /*--
      @desc The Connect V1 ids for this object at each location where it is present, where they
      differ from the object's Connect V2 id. The field will only be present for objects that
      have been created or modified by legacy APIs.
    --*/
    repeated CatalogV1Id catalog_v1_ids = 8;

    /*--
      @desc If `true`, this object is present at all locations (including future locations), except where specified in
      the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations),
      except where specified in the `present_at_location_ids` field.
    --*/
    optional bool present_at_all_locations = 9;

    /* @desc A list of locations where the object is present, even if `present_at_all_locations` is `false`. */
    repeated string present_at_location_ids = 10;

    /* @desc A list of locations where the object is not present, even if `present_at_all_locations` is `true`. */
    repeated string absent_at_location_ids = 11;

    // Only the field corresponding to `type` may be set.

    // @desc Structured data for a [CatalogItem](#type-catalogitem), set for CatalogObjects of type `ITEM`.
    optional CatalogItem item_data = 101;

    // @desc Structured data for a [CatalogCategory](#type-catalogcategory), set for CatalogObjects of type `CATEGORY`.
    optional CatalogCategory category_data = 104;

    // @desc Structured data for a [CatalogItemVariation](#type-catalogitemvariation), set for CatalogObjects of type `ITEM_VARIATION`.
    optional CatalogItemVariation item_variation_data = 105;

    // @desc Structured data for a [CatalogTax](#type-catalogtax), set for CatalogObjects of type `TAX`.
    optional CatalogTax tax_data = 106;

    // @desc Structured data for a [CatalogDiscount](#type-catalogdiscount), set for CatalogObjects of type `DISCOUNT`.
    optional CatalogDiscount discount_data = 108;

    // @desc Structured data for a [CatalogModifierList](#type-catalogmodifierlist), set for CatalogObjects of type `MODIFIER_LIST`.
    optional CatalogModifierList modifier_list_data = 110;

    // @desc Structured data for a [CatalogModifier](#type-catalogmodifier), set for CatalogObjects of type `MODIFIER`.
    optional CatalogModifier modifier_data = 112;
}