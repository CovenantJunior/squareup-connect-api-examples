<%
formatMoney = function(value, currency, isRounded) {
  // Create number formatter.
  const props = {
    style: 'currency',
    currency: currency,
  };

  // Might want to round to no decimal places based on flag.
  if (isRounded) {
    props.maximumFractionDigits = 0;
    props.minimumFractionDigits = 0;
  }
  var formatter = new Intl.NumberFormat('en-US', props);

  return formatter.format(Number(value)/100.0);
}

formatDate = function(date) {
  return date.split("T")[0];
}

getActivityType = function(activity) {
  let type = activity.type;

  switch (type) {
    case "ACTIVATE":
      return "Activate"
    case "LOAD":
      return "Add money"
    case "REDEEM":
      return "Redeem"
    case "REFUND":
      return "Refund"
    case "DEACTIVATE":
      return "Deactivate"
    case "CLEAR_BALANCE":
      return "Clear balance"
    case "ADJUST_INCREMENT":
      return "Adjust increment"
    case "ADJUST_DECREMENT":
      return "Adjust decrement"
    default:
      return "Unknown activity"
  }
} 

getActivityMoney = function(activity) {
  let type = activity.type;
  let money;

  switch (type) {
    case "ACTIVATE":
      money = activity.activateActivityDetails.amountMoney;
      break;
    case "LOAD":
      money = activity.loadActivityDetails.amountMoney;
      break;
    case "REDEEM":
      money = activity.redeemActivityDetails.amountMoney
      break;
    case "REFUND":
      money = activity.refundActivityDetails.amountMoney;
      break;
    case "ADJUST_INCREMENT":
      money = activity.adjustIncrementActivityDetails.amountMoney;
      break;
    case "ADJUST_DECREMENT":
      money = activity.adjustDecrementActivityDetails.amountMoney;
      break;
    default:
      money = null;
  }

  if (money) {
    return formatMoney(money.amount, money.currency);
  } else {
    return null;
  }
} 

stringifyJSON = function(data) {
  return JSON.stringify(data, (key, value) =>
    typeof value === "bigint" ? value.toString() : value
  );
}
%>